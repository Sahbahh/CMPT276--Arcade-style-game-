package com.group2;

import com.group2.managers.entityManager;

/**
	Class to store level position data and to create entities based on that data.
	@author Dylan Kurath
 */

public class Maps
{
    private int[][] currentMap;

	private int[][] map0 = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
							{1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
							{1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,7,0,1},
							{1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1},
							{1,0,1,7,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,6,1},
							{1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,1,0,1},
							{1,0,1,0,1,1,5,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1},
							{1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1},
							{1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1},
							{1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1},
							{1,0,1,0,0,0,5,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1},
							{1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,1,0,1},
							{1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1},
							{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1},
							{1,0,1,0,0,0,5,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1},
							{1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1},
							{1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,5,1,1,0,1,0,1},
							{1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,1},
							{1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,7,1,0,1},
							{1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,6,1,1,0,1},
							{1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
							{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};

	private int[][] map1 = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
							{1,5,5,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1},
							{1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,3,0,1},
							{1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1},
							{1,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1},
							{1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1},
							{1,0,0,0,0,0,0,0,0,7,0,0,1,0,1,0,0,7,0,0,0,0,0,0,0,0,0,1,0,0,0,1},
							{1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1},
							{1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,0,0,0,1},
							{1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1},
							{1,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,5,0,1,0,0,0,1,0,0,0,1},
							{1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1},
							{1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,6,1,1,0,0,0,1},
							{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1},
							{1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1},
							{1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,1},
							{1,0,0,0,7,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
							{1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
							{1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
							{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
							{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,1},
							{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};

	private int[][] map2 = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
							{1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
							{1,0,1,1,0,1,0,0,0,1,7,1,0,3,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
							{1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1},
							{1,1,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1},
							{1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1},
							{1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,6,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1},
							{1,0,0,0,0,1,0,1,0,0,0,1,7,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1},
							{1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,0,1},
							{1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,1,0,1,7,0,0,1,0,1,0,1},
							{1,1,0,0,0,1,1,1,1,1,0,0,0,2,0,1,0,0,1,0,0,1,0,1,1,1,0,1,0,6,0,1},
							{1,1,1,1,0,1,0,0,0,1,1,1,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,1,1,1,0,1},
							{1,0,0,0,0,1,0,1,0,0,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,0,1,0,1},
							{1,0,1,1,1,1,5,1,0,1,0,1,0,0,0,0,0,0,6,0,1,1,0,1,0,0,0,0,0,1,0,1},
							{1,0,1,0,0,0,1,1,0,1,0,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,1,1,1,1,0,1},
							{1,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,1,1,0,1,1,0,1,1,1,0,0,0,1,0,1},
							{1,0,0,0,1,0,0,0,0,0,0,1,0,5,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1},
							{1,0,1,1,1,1,1,6,1,1,0,1,1,1,1,6,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1},
							{1,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1},
							{1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
							{1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
							{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};

	private int[][] map3 = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
							{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
							{1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,1},
							{1,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,1},
							{1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,5,1,0,0,0,1,0,0,0,1,0,0,0,1},
							{1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1},
							{1,0,0,1,0,0,7,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,7,0,0,0,0,1,1},
							{1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1},
							{1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,0,1},
							{1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,6,1,0,0,0,0,1},
							{1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,1},
							{1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1},
							{1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1},
							{1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,2,0,0,0,0,0,1},
							{1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1},
							{1,0,0,1,0,0,7,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,1},
							{1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1},
							{1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,5,1,0,0,0,1,0,0,0,1},
							{1,6,6,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1},
							{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
							{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
							{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};

	/**
	 * Maps constructor
	 * @param spriteSheet passes spritesheet so Maps can render each entity
	 */
    public Maps(SpriteSheet spriteSheet){
    	currentMap = map0;
    }

	/**
	 * gets map Width Bound
	 * @return map width
	 */
	public int mapWidth() {
    	return currentMap[0].length;
    }
    
	/**
	 * gets map height bound
	 * @return map height
	 */
    public int mapHeight() {
    	return currentMap.length;
    }
    
	/**
		Loops through the map array and places entities in the (@link entityManager) based on the value of the map array
		@param entities A reference to the entityManager
		@param spritesheet A reference to the spriteSheet
	*/
	public void initMap(entityManager entities, SpriteSheet spritesheet) {
    	for (int y = 0; y < currentMap.length; y++) {
			for (int x = 0; x < currentMap[0].length; x++) {
				switch(currentMap[y][x]) {
					case 1:
						entities.newEntity(x, y, "barrier", spritesheet);
					break;
					case 2:
						System.out.println("creating userCharacter at " + x + ", " + y);
						entities.newEntity(x, y, "userCharacter", spritesheet);
						System.out.println("exitCell located at " + entities.findEntity("userCharacter").getX() + ", " + entities.findEntity("userCharacter").getY());
						break;
					case 3:
						System.out.println("creating exitCell at " + x + ", " + y);
						entities.newEntity(x, y, "exitCell", spritesheet);
						System.out.println("exitCell located at " + entities.findEntity("exitCell").getX() + ", " + entities.findEntity("exitCell").getY());
						break;
					case 4:
						entities.newEntity(x, y, "bonusReward", spritesheet);
						break;
					case 5:
						entities.newEntity(x, y, "movingEnemy", spritesheet);
						break;
					case 6:
						entities.newEntity(x, y, "punishment", spritesheet);
						break;
					case 7:
						entities.newEntity(x, y, "regularReward", spritesheet);
						break;
				}
			}
		}	
	}
	
	/**
	 * sets current map number
	 * @param i map number
	 */
	public void setCurrentMap(int i) {
		switch(i){
			case 0:
				currentMap = map0;
				break;
			case 1:
				currentMap = map1;
				break;
			case 2:
				currentMap = map2;
				break;
			case 3:
				currentMap = map3;
				break;
			default:
				currentMap = map0;
				break;
		} 
	}
	
	/**
	 * increments map number, if no maps remaining map resets to map 0
	 */
	public void nextMap() {
		if(currentMap == map0) {
			currentMap = map1;
		}
		else if(currentMap == map1) {
			currentMap = map2;
		}
		else if(currentMap == map2) {
			currentMap = map3;
		}
		else if(currentMap == map3) {
			currentMap = map0;
		}
		else {
			currentMap = map0;
		}
	}
}
